name: Destination Databricks

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag'
        required: true
        default: 'dev'
        type: string
  pull_request:
    branches:
      - master
      - destination-databricks
  push:
    branches:
      - master
      - destination-databricks

jobs:
  destination-databricks:
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref || github.ref_name }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "oracle"
          cache: 'gradle'

      - name: Cache local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache Python Virtual Environment
        uses: actions/cache@v4
        with:
          path: airbyte-integrations/connectors/build/.venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-

      - name: Build CDK and publish to Maven local
        run: chmod +x ./gradlew && ./gradlew :airbyte-cdk:java:airbyte-cdk:clean :airbyte-cdk:java:airbyte-cdk:build :airbyte-cdk:java:airbyte-cdk:publishToMavenLocal

      - name: Set up Test Configurations
        working-directory: airbyte-integrations/connectors/destination-databricks
        run: |
          mkdir -p secrets
          echo '${{ secrets.STAGING_CONFIG_JSON }}'        > secrets/staging_config.json
          echo '${{ secrets.MANAGED_TABLES_CONFIG_JSON }}' > secrets/managed_tables_config.json
          echo '${{ secrets.S3_DESTINATION_CONFIG_JSON }}' > secrets/config.json

          echo '${{ secrets.MANAGED_TABLES_CONFIG_JSON }}' > src/test/resources/managed_tables_config.json
          echo '${{ secrets.S3_DESTINATION_CONFIG_JSON }}' > src/test/resources/s3_destination_config.json

      - name: Unit test
        run: ./gradlew :airbyte-integrations:connectors:destination-databricks:clean :airbyte-integrations:connectors:destination-databricks:unitTest

      - name: Build Image
        run: |
          ./gradlew :airbyte-integrations:connectors:destination-databricks:buildConnectorImage
          airbyte-integrations/connectors/build/.venv/bin/pip freeze > airbyte-integrations/connectors/build/.venv/requirements.txt

      - name: Integration test
        run: ./gradlew :airbyte-integrations:connectors:destination-databricks:clean :airbyte-integrations:connectors:destination-databricks:integrationTest

      - name: Push Image to Amazon ECR
        env:
          REGISTRY: ${{ secrets.ECR_REGISTRY }}
          REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ inputs.image_tag || vars.IMAGE_TAG }}
        run: |
          docker tag airbyte/destination-databricks:dev-linux-amd64 ${REGISTRY}/${REPOSITORY}:${IMAGE_TAG}-amd64
          docker tag airbyte/destination-databricks:dev-linux-arm64 ${REGISTRY}/${REPOSITORY}:${IMAGE_TAG}-arm64
          docker push ${REGISTRY}/${REPOSITORY}:${IMAGE_TAG}-amd64
          docker push ${REGISTRY}/${REPOSITORY}:${IMAGE_TAG}-arm64
          
          docker manifest create ${REGISTRY}/${REPOSITORY}:${IMAGE_TAG} \
                 --amend ${REGISTRY}/${REPOSITORY}:${IMAGE_TAG}-amd64 \
                 --amend ${REGISTRY}/${REPOSITORY}:${IMAGE_TAG}-arm64
          
          docker manifest annotate ${REGISTRY}/${REPOSITORY}:${IMAGE_TAG} ${REGISTRY}/${REPOSITORY}:${IMAGE_TAG}-amd64 --os linux --arch amd64
          docker manifest annotate ${REGISTRY}/${REPOSITORY}:${IMAGE_TAG} ${REGISTRY}/${REPOSITORY}:${IMAGE_TAG}-arm64 --os linux --arch arm64
          docker manifest push ${REGISTRY}/${REPOSITORY}:${IMAGE_TAG}